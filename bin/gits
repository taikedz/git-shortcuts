#!/usr/bin/env bash

set -euo pipefail


### Git Shortcuts Usage:help
#
# Tool to provide shortcut commands to common onerous git operations.
#
# The tool displays the command, and executes them. To not execute the command, set `GITS_no_execute=true` in your environment
#
# Fetch and status
#
#   gits fs
#
# Individual diffs in less, independent of whether staged or not
#
#   gits FILES ...
#
# Add files, and commit - if no actual message is specified, an editing session is opened;
#  with the -m  option, use a regular commit;
#  with the -mm option, use an ammend commit
#
#   gits FILES ... -m[m] [MESSAGE ...]
#
# See log in color, with decorations;
#  optionally list files;
#  optionally use graph output, optionally with short messages;
#  any extra arguments for standard `git log`
#
#   gits log [files | graph [short]] [ARGS ...]
#
# Garbage collect commits and files that cannot be reached
#
#   gits gc
#
# Set the upstream remote for the current branch
#
#   gits push [REMOTE [BRANCH]]
#
###/doc

# Still to implement:

# See user profiles, configure user profile, configure local repo with profile
#
#   gits profile list
#   gits profile put PROFILE NAME EMAIL
#   gits profile apply PROFILE
#
# Modify remote - if the URL starts with '%' then it is a substitution
# the first character after `%` defines the pattern separator
#
# e.g. gits remote origin %/github.com/user@github.com/
# e.g. gits remote origin %|https://|ssh://git@|
#
#   gits remote REMOTE { URL | SUBSTITUTION }
#
# Create github repo
#
#   gits github create USER/PROJECT DESCRIPTION
#
# Delete github branch or tag
#
#   gits github delete { tag | branch } REFNAME
#
# Clean the repository
#
#   gits clean
#
# Create mailing patch, apply mailing patch
# specify file `-` to use stout/stdin
#
#   gits patch get FROM_REF TO_REF [FILE]
#   gits patch apply [FILE]
#
# List license names,
#  add a license file to license library,
#  dump license text,
#  apply license text to top of file after first line
#
# e.g. gits license add gplv3 gplv3-full-text.txt
# e.g. gits license add gplv3-c gplv3-short-with-c-comments.txt
#
# e.g. gits license cat gplv3 > ./LICENSE.txt
# e.g. gits license cat gplv3-c > src/new-file.c
# e.g. gits license apply glv3-sh src/existing-file.c
#
#   gits license
#   gits license add NAME LICENSEFILE
#   gits license cat NAME
#   gits license apply NAME SOURCEFILE


##bash-libs: autohelp.sh @ 646701a1 (after 1.1.6)

### Autohelp Usage:bbuild
#
# Autohelp provides some simple facilities for defining help as comments in your code.
# It provides several functions for printing specially formatted comment sections.
#
# Write your help as documentation comments in your script
#
# To output a named section from your script, or a file, call the
# `autohelp:print` function and it will print the help documentation
# in the current script, or specified file, to stdout
#
# A help comment looks like this:
#
#    ### <title> Usage:help
#    #
#    # <some content>
#    #
#    # end with "###/doc" on its own line (whitespaces before
#    # and after are OK)
#    #
#    ###/doc
#
# It can then be printed from the same script by simply calling
#
#   autohelp:print
#
# You can print a different section by specifying a different name
#
# 	autohelp:print section2
#
# > This would print a section defined in this way:
#
# 	### Some title Usage:section2
# 	# <some content>
# 	###/doc
#
# You can set a different comment character by setting the 'HELPCHAR' environment variable.
# Typically, you might want to print comments you set in a INI config file, for example
#
# 	HELPCHAR=";" autohelp:print help config-file.ini
# 
# Which would then find comments defined like this in `config-file.ini`:
#
#   ;;; Main config Usage:help
#   ; Help comments in a config file
#   ; may start with a different comment character
#   ;;;/doc
#
#
#
# Example usage in a multi-function script:
#
#   #!/bin/bash
#
#   ### Main help Usage:help
#   # The main help
#   ###/doc
#
#   ### Feature One Usage:feature_1
#   # Help text for the first feature
#   ###/doc
#
#   feature1() {
#       autohelp:check_section feature_1 "$@"
#       echo "Feature I"
#   }
#
#   ### Feature Two Usage:feature_2
#   # Help text for the second feature
#   ###/doc
#
#   feature2() {
#       autohelp:check_section feature_2 "$@"
#       echo "Feature II"
#   }
#
#   main() {
#       if [[ -z "$*" ]]; then
#           ### No command specified Usage:no-command
#           #No command specified. Try running with `--help`
#           ###/doc
#
#           autohelp:print no-command
#           exit 1
#       fi
#
#       case "$1" in
#       feature1|feature2)
#           "$1" "$@"            # Pass the global script arguments through
#           ;;
#       *)
#           autohelp:check "$@"  # Check if main help was asked for, if so, exits
#
#           # Main help not requested, return error
#           echo "Unknown feature"
#           exit 1
#           ;;
#       esac
#   }
#
#   main "$@"
#
###/doc

### autohelp:print [ SECTION [FILE] ] Usage:bbuild
# Print the specified section, in the specified file.
#
# If no file is specified, prints for current script file.
# If no section is specified, defaults to "help"
###/doc

HELPCHAR='#'

autohelp:print() {
    local input_line
    local section_string="${1:-}"; shift || :
    local target_file="${1:-}"; shift || :
    [[ -n "$section_string" ]] || section_string=help
    [[ -n "$target_file" ]] || target_file="$0"

    #echo -e "\n$(basename "$target_file")\n===\n"
    local sec_start='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s+(.+?)\s+Usage:'"$section_string"'\s*$'
    local sec_end='^\s*'"$HELPCHAR$HELPCHAR$HELPCHAR"'\s*/doc\s*$'
    local in_section=false

    while read input_line; do
        if [[ "$input_line" =~ $sec_start ]]; then
            in_section=true
            echo -e "\n${BASH_REMATCH[1]}\n======="

        elif [[ "$in_section" = true ]]; then
            if [[ "$input_line" =~ $sec_end ]]; then
                in_section=false
            else
                echo "$input_line" | sed -r "s/^\s*$HELPCHAR/ /;s/^  (\S)/\1/"
            fi
        fi
    done < "$target_file"

    if [[ "$in_section" = true ]]; then
            out:fail "Non-terminated help block."
    fi
}

### autohelp:paged Usage:bbuild
#
# Display the help in the pager defined in the PAGER environment variable
#
###/doc
autohelp:paged() {
    : ${PAGER=less}
    autohelp:print "$@" | $PAGER
}

### autohelp:check ARGS ... Usage:bbuild
#
# Automatically print "help" sections and exit, if "--help" is detected in arguments
#
###/doc
autohelp:check() {
    autohelp:check_section "help" "$@"
}

### autohelp:check_section SECTION ARGS ... Usage:bbuild
# Automatically print documentation for named section and exit, if "--help" is detected in arguments
#
###/doc
autohelp:check_section() {
    local section arg
    section="${1:-}"; shift || out:fail "No help section specified"

    for arg in "$@"; do
        if [[ "$arg" =~ --help ]]; then
            cols="$(tput cols)"
            autohelp:print "$section" | fold -w "$cols" -s || autohelp:print "$section"
            exit 0
        fi
    done
}
##bash-libs: out.sh @ 646701a1 (after 1.1.6)

##bash-libs: colours.sh @ 646701a1 (after 1.1.6)

### Colours for terminal Usage:bbuild
# A series of shorthand colour flags for use in outputs, and functions to set your own flags.
#
# Not all terminals support all colours or modifiers.
#
# Example:
# 	
# 	echo "${CRED}Some red text ${CBBLU} some blue text. $CDEF Some text in the terminal's default colour")
#
# Preconfigured colours available:
#
# CRED, CBRED, HLRED -- red, bright red, highlight red
# CGRN, CBGRN, HLGRN -- green, bright green, highlight green
# CYEL, CBYEL, HLYEL -- yellow, bright yellow, highlight yellow
# CBLU, CBBLU, HLBLU -- blue, bright blue, highlight blue
# CPUR, CBPUR, HLPUR -- purple, bright purple, highlight purple
# CTEA, CBTEA, HLTEA -- teal, bright teal, highlight teal
# CBLA, CBBLA, HLBLA -- black, bright red, highlight red
# CWHI, CBWHI, HLWHI -- white, bright red, highlight red
#
# Modifiers available:
#
# CBON - activate bright
# CDON - activate dim
# ULON - activate underline
# RVON - activate reverse (switch foreground and background)
# SKON - activate strikethrough
# 
# Resets available:
#
# CNORM -- turn off bright or dim, without affecting other modifiers
# ULOFF -- turn off highlighting
# RVOFF -- turn off inverse
# SKOFF -- turn off strikethrough
# HLOFF -- turn off highlight
#
# CDEF -- turn off all colours and modifiers(switches to the terminal default)
#
# Note that highlight and underline must be applied or re-applied after specifying a colour.
#
# If the session is detected as being in a pipe, colours will be turned off.
#   You can override this by calling `colours:check --color=always` at the start of your script
#
###/doc

##bash-libs: tty.sh @ 646701a1 (after 1.1.6)

tty:is_ssh() {
    [[ -n "$SSH_TTY" ]] || [[ -n "$SSH_CLIENT" ]] || [[ "$SSH_CONNECTION" ]]
}

tty:is_pipe() {
    [[ ! -t 1 ]]
}

### colours:check ARGS ... Usage:bbuild
#
# Check the args to see if there's a `--color=always` or `--color=never`
#   and reload the colours appropriately
#
#   main() {
#       colours:check "$@"
#
#       echo "${CGRN}Green only in tty or if --colours=always !${CDEF}"
#   }
#
#   main "$@"
#
###/doc
colours:check() {
    if [[ "$*" =~ --color=always ]]; then
        COLOURS_ON=true
    elif [[ "$*" =~ --color=never ]]; then
        COLOURS_ON=false
    fi

    colours:define
    return 0
}

### colours:set CODE Usage:bbuild
# Set an explicit colour code - e.g.
#
#   echo "$(colours:set "33;2")Dim yellow text${CDEF}"
#
# See SGR Colours definitions
#   <https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters>
###/doc
colours:set() {
    # We use `echo -e` here rather than directly embedding a binary character
    if [[ "$COLOURS_ON" = false ]]; then
        return 0
    else
        echo -e "\033[${1}m"
    fi
}

colours:define() {

    # Shorthand colours

    export CBLA="$(colours:set "21;30")"
    export CRED="$(colours:set "21;31")"
    export CGRN="$(colours:set "21;32")"
    export CYEL="$(colours:set "21;33")"
    export CBLU="$(colours:set "21;34")"
    export CPUR="$(colours:set "21;35")"
    export CTEA="$(colours:set "21;36")"
    export CWHI="$(colours:set "21;37")"

    export CBBLA="$(colours:set "1;30")"
    export CBRED="$(colours:set "1;31")"
    export CBGRN="$(colours:set "1;32")"
    export CBYEL="$(colours:set "1;33")"
    export CBBLU="$(colours:set "1;34")"
    export CBPUR="$(colours:set "1;35")"
    export CBTEA="$(colours:set "1;36")"
    export CBWHI="$(colours:set "1;37")"

    export HLBLA="$(colours:set "40")"
    export HLRED="$(colours:set "41")"
    export HLGRN="$(colours:set "42")"
    export HLYEL="$(colours:set "43")"
    export HLBLU="$(colours:set "44")"
    export HLPUR="$(colours:set "45")"
    export HLTEA="$(colours:set "46")"
    export HLWHI="$(colours:set "47")"

    # Modifiers
    
    export CBON="$(colours:set "1")"
    export CDON="$(colours:set "2")"
    export ULON="$(colours:set "4")"
    export RVON="$(colours:set "7")"
    export SKON="$(colours:set "9")"

    # Resets

    export CBNRM="$(colours:set "22")"
    export HLOFF="$(colours:set "49")"
    export ULOFF="$(colours:set "24")"
    export RVOFF="$(colours:set "27")"
    export SKOFF="$(colours:set "29")"

    export CDEF="$(colours:set "0")"

}

colours:auto() {
    if tty:is_pipe ; then
        COLOURS_ON=false
    else
        COLOURS_ON=true
    fi

    colours:define
    return 0
}

colours:auto

### Console output handlers Usage:bbuild
#
# Write data to console stderr using colouring
#
###/doc

### out:info MESSAGE Usage:bbuild
# print a green informational message to stderr
###/doc
function out:info {
    echo "$CGRN$*$CDEF" 1>&2
}

### out:warn MESSAGE Usage:bbuild
# print a yellow warning message to stderr
###/doc
function out:warn {
    echo "${CBYEL}WARN: $CYEL$*$CDEF" 1>&2
}

### out:defer MESSAGE Usage:bbuild
# Store a message in the output buffer for later use
###/doc
function out:defer {
    OUTPUT_BUFFER_defer[${#OUTPUT_BUFFER_defer[@]}]="$*"
}

# Internal
function out:buffer_initialize {
    OUTPUT_BUFFER_defer=(:)
}
out:buffer_initialize

### out:flush HANDLER ... Usage:bbuild
#
# Pass the output buffer to the command defined by HANDLER
# and empty the buffer
#
# Examples:
#
# 	out:flush echo -e
#
# 	out:flush out:warn
#
# (escaped newlines are added in the buffer, so `-e` option is
#  needed to process the escape sequences)
#
###/doc
function out:flush {
    [[ -n "$*" ]] || out:fail "Did not provide a command for buffered output\n\n${OUTPUT_BUFFER_defer[*]}"

    [[ "${#OUTPUT_BUFFER_defer[@]}" -gt 1 ]] || return 0

    for buffer_line in "${OUTPUT_BUFFER_defer[@]:1}"; do
        "$@" "$buffer_line"
    done

    out:buffer_initialize
}

### out:fail [CODE] MESSAGE Usage:bbuild
# print a red failure message to stderr and exit with CODE
# CODE must be a number
# if no code is specified, error code 127 is used
###/doc
function out:fail {
    local ERCODE=127
    local numpat='^[0-9]+$'

    if [[ "$1" =~ $numpat ]]; then
        ERCODE="$1"; shift || :
    fi

    echo "${CBRED}ERROR FAIL: $CRED$*$CDEF" 1>&2
    exit $ERCODE
}

### out:error MESSAGE Usage:bbuild
# print a red error message to stderr
#
# unlike out:fail, does not cause script exit
###/doc
function out:error {
    echo "${CBRED}ERROR: ${CRED}$*$CDEF" 1>&2
}

gits:local-help() {
    local section="$1"; shift

    if [[ "$*" =~ --help ]]; then
        autohelp:print "help-$section"
        exit 0
    fi
}

gits:local-help-noempty() {
    if [[ -z "$*" ]]; then
        autohelp:print "help-$section"
        exit 0
    fi

    gits:local-help "$@"
}

gits:current-branch() {
    git branch | grep '^*' | cut -f 2 -d' '
}

gits:remote-exists() {
    local remote_name target
    target="$1"; shift

    while read remote_name; do
        if [[ "$remote_name" = "$target" ]]; then
            return 0
        fi
    done < <(gits:run remote)

    return 1
}

gits:run() {
    local token

    echo -en "\033[30;1;43mgit " >&2
    for token in "$@"; do
        if [[ "$token" =~ " " ]]; then
            echo -n "\"$token\" " >&2
        else
            echo -n "$token " >&2
        fi
    done
    echo "$CDEF" >&2

    # If output is piped to less, sometimes the stderr output can get displayed there
    # Prevent such an occurrence
    sleep 0.2

    if [[ "${GITS_no_execute:-}" != true ]]; then
        git "$@"
    fi
}
##bash-libs: readkv.sh @ 646701a1 (after 1.1.6)

### Key Value Pair Reader Usage:bbuild
#
# Read a value given the key, from a specified file
#
###/doc

### readkv KEY FILE [DEFAULT] Usage:bbuild
#
# The KEY is the key in the file. A key is identified as starting at the beginning of a line, and ending at the first '=' character
#
# The value starts immediately after the first '=' character.
#
# If no value is found, the DEFAULT value is returned, or an empty string
#
###/doc

function readkv {
    local thedefault thekey thefile
    thekey="$1" ; shift
    thefile="$1"; shift

    if [[ -n "${1:-}" ]]; then
        thedefault="$1"; shift || :
    fi

    local res="$(readkv:meaningful_data "$thefile"|grep -E "^$thekey"'\s*='|sed -r "s/^$thekey"'\s*=\s*//')"
    if [[ -z "$res" ]]; then
        echo "${thedefault:-}"
    else
        echo "$res"
    fi
}

### readkv:require KEY FILE Usage:bbuild
#
# Like readkv, but causes a failure if the file does not exist.
#
###/doc

function readkv:require {
    if [[ -z "${2:-}" ]]; then
        out:fail "No file specified to read [$*]"
    fi

    if [[ ! -f "$2" ]] ; then
        out:fail "No such file $2 !"
    fi

    if ! head -n 1 "$2" > /dev/null; then
        out:fail "Could not read $2"
    fi
    readkv "$@"
}

### readkv:moeaningful_data FILE Usage:bbuild
# Dump the file contents, stripping meaningless data (empty lines and comment lines)
###/doc
readkv:meaningful_data() {
    grep -v -P '^\s*(#.*)?$' "$1"
}
##bash-libs: ensureline.sh @ 646701a1 (after 1.1.6)

### ensureline Usage:bbuild
#
# Utility for manipulating config files (and other files where all similar lines need to match).
#
#    ensureline FILE PATTERN LINEDATA
#
# Ensure that **every** line in FILE matched by PATTERN becomes LINEDATA
#
# If no such line is found, LINEDATA is appended to the end of the file.
#
# For example
#
# 	ensureline /etc/ssh/sshd_config '#?PasswordAuthentication.*' "PasswordAuthentication no"
#
# Ensure that the PasswordAuthentication line, whether commented out or not,
# becomes an uncomented "PasswordAuthentication no", or add it to the end of the file.
#
# The match applies to the full line; the pattern '#?PasswordAuth' on its own would not match, due to the missing characters.
#
###/doc

function ensureline {
    local file="$1"; shift || :
    local pattern="$1"; shift || :

    if grep -P "^$pattern$" "$file" -q ; then
        ensureline:matches "$file" "$pattern" "$@"
    else
        ensureline:add "$file" "$pattern" "$@"
    fi
}

# The following functions are internal, and should not be used.
# Use the main `ensureline` instead

function ensureline:matches {
    local FILE="$1"; shift || :
    local PATTERN="$1"; shift || :
    local LINEDATA="$1"; shift || :

    #TODO - add support to specify a start line, and a range?

    sed -r "s^$PATTERN$$LINEDATA" -i "$FILE"
}

function ensureline:add {
    local FILE="$1"; shift || :
    local PATTERN="$1"; shift || :
    local LINEDATA="$1"; shift || :

    echo "$LINEDATA" >> "$FILE"
}

gits:prefs:get() {
    local prefsfile setting
    setting="${1:-}" ; shift || out:fail "No setting provided"
    prefsfile="$(gits:prefs:filepath)"

    if [[ -f "$prefsfile" ]]; then
        readkv "$setting" "$prefsfile" "$*"
    else
        [[ -z "$*" ]] || echo "$*"
    fi
}

gits:prefs:put() {
    local prefsfile setting value
    setting="${1:-}" ; shift || out:fail "No setting provided"
    value="${1:-}"; shift || out:fail "No value provided"
    prefsfile="$(gits:prefs:filepath)"

    [[ -f "$prefsfile" ]] || touch "$prefsfile"

    ensureline "$prefsfile" "$setting\s*=.*" "$setting = $value"
}

gits:prefs:filepath() {
    local searchdir
    searchdir="$PWD"

    while [[ ! -d "$searchdir/.git" ]]; do
        searchdir="$(dirname "$searchdir")"
        [[ "$searchdir" != / ]] || out:fail "'$PWD' is not in a git repository."
    done

    echo "$searchdir/.git-shortcuts"
}

gits:prefs:advise() {
    out:info "Set '$1 = $2' in .git-shortcuts to make this decision permanent."
}
gits:store:create-get-file() {
    local filepath
    filepath="$(gits:store:get-file "$1")"
    touch "$filepath" || out:fail "Could not create '$storefile'"
    echo "$filepath"
}

gits:store:get-file() {
    local storefile fsubdir fname
    fsubdir="$(dirname "$1")" || out:fail "No file specified"
    [[ "$fsubdir" != . ]] || fsubdir=""

    fname="$(basename "$1")"
    storefile="$(gits:store:get-dir "$fsubdir")/$fname"

    echo "$storefile"
}

gits:store:get-dir() {
    local storedir
    storedir="$HOME/.config/git-shortcuts/${1:-}"
    mkdir -p "$storedir"
    echo "$storedir"
}

gits:status:short() {
    local dirs=(: "$@")
    local d

    [[ -n "${dirs[@]:1}" ]] || dirs=(: .)

    for d in "${dirs[@]:1}"; do
        (cd "$d"
        out:info "$PWD"
        gits:run status -sb -uall
        )
    done
}

gits:status:fetch() {
    local dirs=(: "$@")
    local d

    [[ -n "${dirs[@]:1}" ]] || dirs=(: .)

    for d in "${dirs[@]:1}"; do
        (cd "$d"
        out:info "$PWD"
        gits:run fetch --all
        gits:run status -uall
        )
    done
}

### diff [RANGE] ARGUMENTS ... Usage:help-diff
# Display diffs in colour, inside `less`
#
# To display the diff for all changes, run
#
#   gits .
#
# The RANGE option can be specified as "/" optinally followed by a first number,
#   optionally followed by another "/", optionally followed by a second number
#
# The first slash specified on its own causes the comparison to be from HEAD to current state, useful for diffing files that have been staged
#
# A subsequent first number N diffs from HEAD~$N to HEAD
#
# A subsequent second slash causes diff from HEAD~$N to current state, even if staged
#
# A final second number M causes a diff from HEAD~$N to HEAD~$M
#
# Examples:
#
# See diffs for files ; will show nothing if files are staged
#
#   gits file1 file2
#
# See diffs for staged files
#
#   gits / file1 file2
#
# See diffs from HEAD~3 to HEAD
#
#   gits /3/
#
###/doc

gits:check-commit() {
    local x
    for x in "$@"; do
        if [[ "$x" =~ ^-mm?$ ]]; then
            return 1
        fi
    done

    return 0
}

gits:diff() {
    gits:check-commit "$@" || {
        gits:commit "$@"
        return
    }

    local arg parameters
    parameters=(:)

    arg="${1:-}"

    gits:local-help-noempty diff "$@"

    if [[ "$arg" = / ]]; then
        shift
        parameters+=(HEAD -- "$@")
    elif [[ "$arg" =~ ^/([0-9]+)$ ]]; then
        shift
        parameters+=(HEAD~"${BASH_REMATCH[1]}" -- "$@")
    elif [[ "$arg" =~ ^/([0-9]+)/$ ]]; then
        shift
        parameters+=(HEAD~"${BASH_REMATCH[1]}" HEAD -- "$@")
    elif [[ "$arg" =~ ^/([0-9]+)/([0-9]+)$ ]]; then
        shift
        parameters+=(HEAD~"${BASH_REMATCH[1]}" HEAD~"${BASH_REMATCH[2]}" -- "$@")
    else
        parameters+=("$@")
    fi


    gits:run diff --color "${parameters[@]:1}" | less -R
}

gits:diff:report-empty() {
    local i=0
    while read; do
        echo "$REPLY"
        ((i+=1))
    done
    if [[ "$i" = 0 ]]; then
        echo "${CYEL}No changes on '$1'${CDEF}"
        return 1
    fi
}
##bash-libs: askuser.sh @ 646701a1 (after 1.1.6)

### askuser Usage:bbuild
# Present the user with questions on stderr
###/doc


yespat='^(yes|YES|y|Y)$'
numpat='^[0-9]+$'
rangepat='[0-9]+,[0-9]+'
listpat='^[0-9 ]+$'
blankpat='^ *$'

### askuser:confirm Usage:bbuild
# Ask the user to confirm a closed question. Defaults to no
#
# returns 0 on successfully match 'y' or 'yes'
# returns 1 otherwise
###/doc
function askuser:confirm {
    read -p "$* [y/N] > " 1>&2
    if [[ "$REPLY" =~ $yespat ]]; then
        return 0
    else
        return 1
    fi
}

### askuser:ask Usage:bbuild
# Ask the user to provide some text
#
# Echoes out the entered text
###/doc
function askuser:ask {
    read -p "$* : " 1>&2
    echo "$REPLY"
}

### askuser:password Usage:bbuild
# Ask the user to enter a password (does not echo what is typed)
#
# Echoes out the entered text
###/doc
function askuser:password {
    read -s -p "$* : " 1>&2
    echo >&2
    echo "$REPLY"
}

### askuser:choose_multi Usage:bbuild
# Allows the user to choose from multiple choices
#
# askuser:chose_multi MESG CHOICESTRING
#
#
# MESG is a single string token that will be displayed as prompt
#
# CHOICESTRING is a comma-separated, or newline separated, or "\\n"-separated token string
#
# Equivalent strings include:
#
# * `"a\\nb\\nc"` - quoted and explicit newline escapes
# * `"a,b,c"` - quoted and separated with commas
# * `a , b , c` - not quoted, separated by commas
# * `a`, `b` and `c` on their own lines
#
# User input:
#
# User can choose by selecting
#
# * a single item by number
# * a range of numbers (4,7 for range 4 to 7)
# * or a string that matches the pattern
#
# All option lines that match will be returned, one per line
#
# If the user selects nothing, then function returns 1 and an empty stdout
###/doc
function askuser:choose_multi {
    local mesg=$1; shift || :
    local choices=$(echo "$*"|sed -r 's/ *, */\n/g')

    out:info "$mesg:" 
    local choicelist="$(echo -e "$choices"|grep -E '^' -n| sed 's/:/: /')"
    echo "$choicelist" 1>&2
    
    local sel=$(askuser:ask "Choice")
    if [[ "$sel" =~ $blankpat ]]; then
        return 1

    elif [[ "$sel" =~ $numpat ]] || [[ "$sel" =~ $rangepat ]]; then
        echo -e "$choices" | sed -n "$sel p"
    
    elif [[ "$sel" =~ $listpat ]]; then
        echo "$choicelist" | grep -E "^${sel// /|}:" | sed -r 's/^[0-9]+: //'

    else
        echo -e "$choices"  |grep -E "$(echo "$sel"|tr " " '|')"
    fi
    return 0
}

### askuser:choose Usage:bbuild
# Ask the user to choose an item
#
# Like askuser:choose_multi, but will loop if the user selects more than one item
#
# If the user provides no entry, returns 1
#
# If the user chooses one item, that item is echoed to stdout
###/doc
function askuser:choose {
    local mesg=$1; shift || :
    while true; do
        local thechoice="$(askuser:choose_multi "$mesg" "$*")"
        local lines=$(echo -n "$thechoice" | grep '$' -c)
        if [[ $lines = 1 ]]; then
            echo "$thechoice"
            return 0
        elif [[ $lines = 0 ]]; then
            return 1
        else
            out:warn "Too many results"
        fi
    done
}

### Commit -m[m] [MESSAGE] Usage:help-commit
#
# After a series of items, if -m or -mm are found, performs an add + commit
#
# -m adds a new commit
# -mm amends the last commit
#
# if no MESSAGE is suppplied, an editor session is started
#
# If the current branch is master, and `allow_master_commits` in .gits-shorthands is not set,
#   then prompt the user whether to allow.
#   When set to `true`, never prompts and allows comitting to master
#   When set to `false`, never prompts and prevents comitting to master
#
###/doc

gits:commit() {
    gits:local-help commit "$@"

    gits:commit:check_master

    # need to add help that does not catch --help as part of message
    local files item arguments
    files=(:)
    arguments=(:)
    item="$1"

    while [[ ! "$item" =~ ^-mm?$ ]]; do
        files+=("$item")
        shift
        item="$1"
    done
    shift

    if [[ "$item" = -mm ]]; then
        arguments+=(--amend)
    fi

    if [[ -n "$*" ]]; then
        arguments+=(-m "$*")
    fi

    if [[ -n "${files[*]:1}" ]]; then
        gits:run add "${files[@]:1}"
    fi

    gits:run commit "${arguments[@]:1}"
}

gits:commit:check_master() {
    local onbranch allowmaster setting
    setting=allow_master_commits
    onbranch="$(git status | head -n1 | grep -oP '(?<=On branch )[^\s]+')"
    allowmaster="$(gits:prefs:get "$setting")"

    if [[ "$onbranch" = master ]]; then
        if [[ "$allowmaster" = false ]]; then
            out:fail "You must not commit on master. Try moving your changes with 'git stash' and 'git checkout' before comitting again."

        elif [[ "$allowmaster" = true ]]; then
            return 0

        else
            if askuser:confirm "${CYEL}You are comitting on master - continue ?${CDEF}"; then
                gits:prefs:advise "$setting" "true"
                return 0
            fi
            gits:prefs:advise "$setting" "false"
            out:fail "Abort"
        fi
    fi

    return 0
}
### log [OPTIONS] [FILES ...] Usage:help-log
#
# Show short log, in colour.
#
# The following option shortcuts are specific to gits:
#
# files|-f
#   Show files. Equivalent to standard option --name-only
#
# graph|-g
#   Show as graph, on a single line unless "long" is specified
#
# long|-l
#   Show long format instead of oneline format
#
# The [FILES ...] are optional, and can also be any other git-log standard options
#
###/doc

gits:log() {
    local arg
    gits:local-help log "$@"

    local options=(--color --decorate=short)
    local add_short=true

    if [[ "${1:-}" = graph ]] || [[ "${1:-}" = -g ]]; then
        options+=(--graph --all)
        shift

    fi

    for arg in "$@"; do
    case "$arg" in
    files|-f)
        options+=(--name-only)
        shift
        ;;
    graph|-g)
        options+=(--graph --all)
        shift
        ;;
    long|-l)
        add_short=false
        shift
        ;;
    *)
        break
        ;;
    esac
    done

    if [[ "$add_short" = true ]]; then
        options+=(--oneline)
    fi

    gits:run log "${options[@]}" "$@"
}
##bash-libs: varify.sh @ 646701a1 (after 1.1.6)

### Varify Usage:bbuild
# Make a string into a valid variable name or file name
#
# Collapses any string of invalid characters into a single underscore
#
# For example
#
# 	varify:var "http://example.com"
#
# returns
#
# 	http_example.com
#
###/doc

### varify:var Usage:bbuild
#
# Valid characters for varify:var are:
#
# * a-z
# * A-Z
# * 0-9
# * underscore ("_")
###/doc
function varify:var {
    echo "$*" | sed -r 's/[^a-zA-Z0-9_]/_/g'
}

### varify:fil Usage:bbuild
#
# Valid characters for varify:fil are:
#
# * a-z
# * A-Z
# * 0-9
# * underscore ("_")
# * dash ("-")
# * period (".")
#
# Can be used to produce filenames.
#
###/doc
function varify:fil {
    echo "$*" | sed -r 's/[^a-zA-Z0-9_.-]/_/g'
}

gits:profiles:_dispatch() {
    local action
    if [[ -z "$*" ]]; then
        echo "Current config:"
        echo "  Name:  $(git config user.name)"
        echo "  Email: $(git config user.email)"

    else
        action="${1:-}" ; shift || :
        case "$action" in
        put|get|delete|list|apply)
            gits:profiles:"$action" "$@"
            ;;
        *)
            out:fail "Unknown action"
        esac
    fi
}

gits:profiles:get() {
    local profiled profilename
    profilename="$(varify:fil "${1:-}")"; shift || out:fail "No profile name specified"
    profilef="$(gits:store:get-file profiles/$profilename.txt)"

    [[ -f "$profilef" ]] || out:fail "No such profile '$profilename'"

    gits:profiles:display "$profilef"
}

gits:profiles:delete() {
    local profiled profilename
    profilename="$(varify:fil "${1:-}")"; shift || out:fail "No profile name specified"
    profilef="$(gits:store:get-file profiles/$profilename.txt)"

    [[ -f "$profilef" ]] || out:fail "No such profile '$profilename'"

    askuser:confirm "Delete '$profilename'?" || return
    rm "$profilef"
}

gits:profiles:display() {
    sed -r 's/^/\t/' "$1"
}

gits:profiles:apply() {
    local profiled profilename uname umail
    profilename="$(varify:fil "${1:-}")"; shift || out:fail "No profile name specified"
    profilef="$(gits:store:get-file profiles/$profilename.txt)"

    [[ -f "$profilef" ]] || out:fail "No such profile '$profilename'"

    uname="$(readkv:require Name "$profilef")" #|| out:fail "Name could not be read"
    umail="$(readkv:require Mail "$profilef")" #|| out:fail "Mail could not be read"

    gits:run config user.name "$uname"
    gits:run config user.email "$umail"
}

gits:profiles:put() {
    local profiled profilename username useremail
    profilename="$(varify:fil "${1:-}")"; shift || out:fail "No profile name specified"
    profilef="$(gits:store:create-get-file profiles/$profilename.txt)"

    username="${1:-}"; shift || out:fail "No user name specified"
    useremail="${1:-}"; shift || out:fail "No user email specified"
    
    echo -e "Name=$username\nMail=$useremail" > "$profilef"
}

gits:profiles:list() {
    local profiled pfile sname
    profiled="$(gits:store:get-dir profiles)"

    for pfile in "$profiled/"*.txt ; do
        sname="${pfile##*/}"
        sname="${sname%.*}"

        echo "$sname"
        gits:profiles:display "$pfile"
    done
}
### gits push [REMOTE [BRANCH]] Usage:help-push
#
# Push to remote; if not set, automatically guess and set upstream
#
###/doc

gits:push() {
    gits:local-help push "$@"

    local remote branch localbranch pushargs
    pushargs=(push --set-upstream)
    localbranch="$(gits:current-branch)"

    [[ -n "$localbranch" ]] || out:fail "Could not get local branch !"

    if [[ -z "$*" ]]; then
        gits:run "${pushargs[@]}" origin "$localbranch"
        return
    fi

    remote="$1"; shift

    gits:remote-exists "$remote" || out:fail "No such remote '$remote'"

    if [[ -z "$*" ]]; then
        gits:run "${pushargs[@]}" "$remote" "$localbranch"
    else
        branch="$1"; shift

        gits:run "${pushargs[@]}" "$remote" "$branch"
    fi
}
### pull [backtrack [N]] Usage:help-pull
#
# gits pull
# ---------
#
# With no options, performs a fetch and checks for fast-forwardability.
#
# If the remote branch is simply ahead, the local branch will be fast-forwarded.
#
# If the branches have diverged, no pull is performed and a warning is printed.
#
# gits pull backtrack [N]
# -----------------------
#
# If your local and remote branches have diverged due to upstream having rebased, do a backtrack.
#
#   gits pull backtrack 5
#
# revert 5 commits, then pull
#
#   gits pull backtrack
#
# reverts each commit one by one until no longer on a divergent path
#
###/doc

##bash-libs: patterns.sh @ 646701a1 (after 1.1.6)

### Useful patterns Usage:bbuild
#
# Some useful regex patterns, exported as environment variables.
#
# They are not foolproof, and you are encouraged to improve upon them.
#
# $PAT_blank - detects whether an entire line is empty or whitespace
# $PAT_comment - detects whether is a line is a script comment (assumes '#' as the comment marker)
# $PAT_num - detects whether the string is an integer number in its entirety
# $PAT_cvar - detects if the string is a valid C variable name
# $PAT_filename - detects if the string is a safe UNIX or Windows file name;
#   does not allow presence of whitespace or special characters aside from '_', '.', '-'
# $PAT_email - simple heuristic to determine whether a string looks like a valid email address
#
###/doc

export PAT_blank='^\s*$'
export PAT_comment='^\s*(#.*)?$'
export PAT_num='^[0-9]+$'
export PAT_cvar='^[a-zA-Z_][a-zA-Z0-9_]*$'
export PAT_filename='^[a-zA-Z0-9_.-]$'
export PAT_email="$PAT_filename@$PAT_filename.$PAT_cvar"

gits:pull:_dispatch() {
    gits:local-help pull "$@"

    local action="${1:-}" ; shift || :

    if [[ -z "$action" ]]; then
        gits:pull:checking
        return
    fi

    case "$action" in
    backtrack)
        gits:pull:backtrack "$@"
        ;;
    *)
        out:fail "No subaction specified"
        ;;
    esac
}

gits:pull:checking() {
    gits:run fetch --all
    
    if git status | grep -qP "^Your branch is up to date"; then
        gits:status:short
        echo
        out:info "Everything up to date"

    elif (git status | grep -qP "^Your branch.+can be fast-forwarded" &&
        git status | grep -vqP "^Changes|^Untracked"
        ); then

        gits:run pull

    else
        gits:run status -uall
        echo
        out:fail "Unsure whether to pull yet."
    fi
}

gits:pull:backtrack() {
    local back_by="${1:-}"; shift || :

    if [[ -n "$back_by" ]]; then
        [[ "$back_by" =~ $PAT_num ]] || out:fail "NaN: $back_by"
        gits:run reset --hard HEAD~$back_by

    else
        while git status | grep -q diverged; do
            git reset --hard HEAD~1
        done

    fi

    gits:run log --graph --oneline --all -n10

    askuser:confirm "Pull now ?" || exit 1

    gits:run pull
}
### gits gc Usage:help-gc
#
# Remove all git commits and data that cannot be reached anymore.
#
###/doc

gits:gc-full() {
    gits:local-help gc "$@"

    gits:run -c gc.reflogExpire=0 \
        -c gc.reflogExpireUnreachable=0 \
        -c gc.rerereresolved=0 \
        -c gc.rerereunresolved=0 \
        -c gc.pruneExpire=now \
        gc
}
### gits branch [all] Usage:help-branch
#
# Show information about the current branch, or all branches
#
###/doc

gits:branch:show-upstream() {
    gits:run status -sb|grep -oP '^## \K.+'|sed 's/\.\.\./ --> /'
}

gits:branch:show-all() {
    gits:run branch -vv
}

gits:branch:_dispatch() {
    gits:local-help branch "$@"

    if [[ -z "$*" ]]; then
        gits:branch:show-upstream
        exit
    fi

    case "$1" in
    all)
        gits:branch:show-all
        ;;
    *)
        out:fail "Unknown 'branch' sub-operation '$1'"
        ;;
    esac
}

gits:main() {

    local action

    action="${1:-}"; shift || :

    [[ -n "$action" ]] || {
        gits:status:short
        echo
        out:info "${CBBLU}(see also: gits fs)"
        exit
    }

    case "$action" in
    -mm)
        gits:commit "$action" "$@"
        ;;
    help)
        autohelp:print help
        ;;
    fs)
        gits:status:fetch "$@"
        ;;
    status)
        gits:status:short "$@"
        ;;
    log)
        gits:log "$@"
        ;;
    profile)
        gits:profiles:_dispatch "$@"
        ;;
    push)
        gits:push "$@"
        ;;
    pull)
        gits:pull:_dispatch "$@"
        ;;
    gc)
        gits:gc-full "$@"
        ;;
    branch)
        gits:branch:_dispatch "$@"
        ;;
    --help)
        autohelp:print
        exit 0
        ;;
    diff)
        gits:diff "$@"
        ;;
    *)
        gits:diff "$action" "$@"
        ;;
    esac
}

gits:main "$@"
